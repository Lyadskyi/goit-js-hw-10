{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\n\nimport \"flatpickr/dist/flatpickr.min.css\";\n\nimport iziToast from \"izitoast\";\n\nimport \"izitoast/dist/css/iziToast.min.css\";\n// Додатковий імпорт стилів для помилки\nimport iconError from '../img/x-octagon.svg';\n\nconst btnStart = document.querySelector('[data-start]');\nconst dataDays = document.querySelector('[data-days]');\nconst dataHours = document.querySelector('[data-hours]');\nconst dataMinutes = document.querySelector('[data-minutes]');\nconst dataSeconds = document.querySelector('[data-seconds]');\n\nconst datetimePicker = document.querySelector('#datetime-picker');\n\nlet userSelectedDate;\n\nbtnStart.disabled = true;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose([selectedDates]) {\n    if (selectedDates < options.defaultDate) {\n      btnStart.disabled = true;\n      iziToast.error({\n        title: 'Error',\n        titleColor: '#fff',\n        titleSize: '16px',\n        titleLineHeight: '1.5',\n        message: \"Please choose a date in the future\",\n        messageColor: '#fff',\n        messageSize: '16px',\n        messageLineHeight: '1.5',\n        backgroundColor: '#B51B1B',\n        theme: 'dark',\n        iconUrl: iconError,\n        position: 'topRight',\n      });\n    } else {\n      btnStart.disabled = false;\n      userSelectedDate = selectedDates.getTime();\n    }\n  },\n};\n\nflatpickr(datetimePicker, options);\n\nbtnStart.addEventListener('click', handleStartButtonClick);\n\nfunction handleStartButtonClick() {\n  if (userSelectedDate > Date.now()) {\n    const timerCalc = () => {\n      outputsUpdate(\n        [dataDays, dataHours, dataMinutes, dataSeconds],\n        convertMs(userSelectedDate - Date.now())\n      );\n      if (\n        userSelectedDate - 1000 < Date.now() &&\n        dataSeconds.textContent === '00'\n      )\n        clearInterval(interval);\n    };\n    timerCalc();\n    const interval = setInterval(timerCalc, 1000);\n    btnStart.disabled = true;\n    datetimePicker.disabled = true;\n    btnStart.dataset.start = 'started';\n  } else {\n    iziToast.error({\n        title: 'Error',\n        titleColor: '#fff',\n        titleSize: '16px',\n        titleLineHeight: '1.5',\n        message: \"Please choose a date in the future\",\n        messageColor: '#fff',\n        messageSize: '16px',\n        messageLineHeight: '1.5',\n        backgroundColor: '#B51B1B',\n        theme: 'dark',\n        iconUrl: iconError,\n        position: 'topRight',\n    });\n    btnStart.disabled = true;\n  }\n};\n\nconst outputUpdate = (output, time) => {\n  output.textContent = time.toString().padStart(2, '0');\n};\nconst outputsUpdate = (\n  [dataDays, dataHours, dataMinutes, dataSeconds],\n  { days, hours, minutes, seconds }\n) => {\n  outputUpdate(dataDays, days);\n  outputUpdate(dataHours, hours);\n  outputUpdate(dataMinutes, minutes);\n  outputUpdate(dataSeconds, seconds);\n};\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nconsole.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\nconsole.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}\nconsole.log(convertMs(24140000)); // {days: 0, hours\n\n// ---------- REMARKS OF THE MENTOR ---------- //\n\n// ✅ 1. Завдання вирішено правильно\n\n// Завдання #1 вирішено неправильно\n\n// Well executed moments/Добре виконані моменти //\n\n// Гарна назва змінних: назви змінних, як-от btnStart, dataDays, dataHours тощо, чітко описують, що вони представляють,\n// що робить код читабельним.\n\n// Добре форматований код: код гарно відформатований, що робить його легшим для читання та розуміння.\n// Відступи та проміжки є послідовними і правильно застосованими.\n\n// Використання padStart у функції outputUpdate для форматування чисел: це гарантує, що всі числа відображаються з двома цифрами,\n// що є вимогою завдання.\n\n// Improvement/Поліпшення //\n\n// Змінна userSelectedDate повинна зберігати об'єкт дати, а не час у мілісекундах з часу UNIX епохи.\n// Це відповідає очікуванням від обробника onClose, де selectedDates - є об'єктом дати.\n\n// У функції onClose всередині об'єкту опцій неправильно використовується [selectedDates]. Оскільки selectedDates є масивом,\n// вибрану дату слід отримати за допомогою selectedDates[0].\n\n// При вимкненні вибору дати та часу використовуйте datetimePicker.flatpickr().close();, щоб закрити будь-які відкриті календарі\n// flatpickr та негайно запобігти подальшому вибору дати після старту таймера.\n\n// Critical errors/Критичні помилки //\n\n// Використання selectedDates.getTime() є неправильним. Оскільки selectedDates - це масив, у нього відсутній метод getTime.\n// Слід використовувати userSelectedDate = selectedDates[0].getTime();. Це критична логічна помилка, яка спричинить збій скрипта.\n\n// Використання if (userSelectedDate - 1000 < Date.now() && dataSeconds.textContent === '00') для спроби очищення інтервалу може\n// не завжди працювати та може призводити до помилки, якщо є затримка або затримка. Його можна безпечно замінити на\n// if (userSelectedDate <= Date.now()).\n\n// На основі виявлених критичних помилок, завдання не було прийняте та потребує виправлень. Після виправлення проблем, зокрема,\n// поводження з userSelectedDate і логіки очищення інтервалу, завдання буде краще відповідати вимогам, що викладені в інструкціях.\n"],"names":["btnStart","dataDays","dataHours","dataMinutes","dataSeconds","datetimePicker","userSelectedDate","options","selectedDates","iziToast","iconError","flatpickr","handleStartButtonClick","timerCalc","outputsUpdate","convertMs","interval","outputUpdate","output","time","days","hours","minutes","seconds","ms"],"mappings":"8IAUA,MAAMA,EAAW,SAAS,cAAc,cAAc,EAChDC,EAAW,SAAS,cAAc,aAAa,EAC/CC,EAAY,SAAS,cAAc,cAAc,EACjDC,EAAc,SAAS,cAAc,gBAAgB,EACrDC,EAAc,SAAS,cAAc,gBAAgB,EAErDC,EAAiB,SAAS,cAAc,kBAAkB,EAEhE,IAAIC,EAEJN,EAAS,SAAW,GAEpB,MAAMO,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQ,CAACC,CAAa,EAAG,CACnBA,EAAgBD,EAAQ,aAC1BP,EAAS,SAAW,GACpBS,EAAS,MAAM,CACb,MAAO,QACP,WAAY,OACZ,UAAW,OACX,gBAAiB,MACjB,QAAS,qCACT,aAAc,OACd,YAAa,OACb,kBAAmB,MACnB,gBAAiB,UACjB,MAAO,OACP,QAASC,EACT,SAAU,UAClB,CAAO,IAEDV,EAAS,SAAW,GACpBM,EAAmBE,EAAc,UAEpC,CACH,EAEAG,EAAUN,EAAgBE,CAAO,EAEjCP,EAAS,iBAAiB,QAASY,CAAsB,EAEzD,SAASA,GAAyB,CAChC,GAAIN,EAAmB,KAAK,MAAO,CACjC,MAAMO,EAAY,IAAM,CACtBC,EACE,CAACb,EAAUC,EAAWC,EAAaC,CAAW,EAC9CW,EAAUT,EAAmB,KAAK,KAAK,CAC/C,EAEQA,EAAmB,IAAO,KAAK,IAAK,GACpCF,EAAY,cAAgB,MAE5B,cAAcY,CAAQ,CAC9B,EACIH,IACA,MAAMG,EAAW,YAAYH,EAAW,GAAI,EAC5Cb,EAAS,SAAW,GACpBK,EAAe,SAAW,GAC1BL,EAAS,QAAQ,MAAQ,SAC7B,MACIS,EAAS,MAAM,CACX,MAAO,QACP,WAAY,OACZ,UAAW,OACX,gBAAiB,MACjB,QAAS,qCACT,aAAc,OACd,YAAa,OACb,kBAAmB,MACnB,gBAAiB,UACjB,MAAO,OACP,QAASC,EACT,SAAU,UAClB,CAAK,EACDV,EAAS,SAAW,EAExB,CAEA,MAAMiB,EAAe,CAACC,EAAQC,IAAS,CACrCD,EAAO,YAAcC,EAAK,SAAU,EAAC,SAAS,EAAG,GAAG,CACtD,EACML,EAAgB,CACpB,CAACb,EAAUC,EAAWC,EAAaC,CAAW,EAC9C,CAAE,KAAAgB,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAS,IAC9B,CACHN,EAAahB,EAAUmB,CAAI,EAC3BH,EAAaf,EAAWmB,CAAK,EAC7BJ,EAAad,EAAamB,CAAO,EACjCL,EAAab,EAAamB,CAAO,CACnC,EAEA,SAASR,EAAUS,EAAI,CAQrB,MAAMJ,EAAO,KAAK,MAAMI,EAAK,KAAG,EAE1BH,EAAQ,KAAK,MAAOG,EAAK,MAAO,IAAI,EAEpCF,EAAU,KAAK,MAAQE,EAAK,MAAO,KAAQ,GAAM,EAEjDD,EAAU,KAAK,MAASC,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAJ,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,QAAQ,IAAIR,EAAU,GAAI,CAAC,EAC3B,QAAQ,IAAIA,EAAU,IAAM,CAAC,EAC7B,QAAQ,IAAIA,EAAU,MAAQ,CAAC"}